pragma circom 2.0.0;

template MiMC5Feistel() {
    signal input iL;
    signal input iR;
    signal input k;

    signal output oL;
    signal output oR;

    var nRounds = 20;
    var c[20] = [
0,
11520610475324607840858308195066668137409662948352475504764296169165115803240,
7380530736996472911521999765496498590193279332249872233064285577407049181349,
68885296532154908873120548418116193832116416191809434352409769672854788055155,
96496879547334043782841457205213630234752334214502686236609859394437437714700,
112121863226883841113800641466356129694661373334831465599525366188552477945867,
30420640900632950822555578428912257817897160218089207123119561448939121736711,
58403998272758360814034712139661482937480552302451405228586526919188827735782,
44833537956231992993631654474825667321278475856967642562141603247737229169271,
15635900778628365774535847740320827257351597383646942076845947475801909611087,
38857801419879167858527861433569122443101277344881261667503139870835542509582,
81871277436080336017320711469321124377574231709476155171333207295782178782433,
88634781314138890990995352227616341380799049103231170269671213877084966985890,
73362166171439113286127483997327522930196804844777838811494004629699910782991,
12420693495751940156432354990801137534224541100566928553438515934240090962774,
71669001146446845601587722527637104707946116175989577312019107006104737863649,
11254801270530788168296880920828516317329097556201287029027364687554601999682,
115443356759730021670107622038991604662938905182604193207117830233602200569537,
109684940816998430822791185954114316656430368501905258831047222055394173113548,
115129913146463256519554399365530022602183544913785439507216866007868559092524

    ];

    signal lastOutputL [nRounds + 1];
    signal lastOutputR [nRounds + 1];
    var base[nRounds];
    signal base2[nRounds];
    signal base4[nRounds];

    lastOutputL[0] <== iL;
    lastOutputR[0] <== iR;
    for(var i = 0; i < nRounds; i++){
        base[i] = lastOutputR[i] + k + c[i];
        base2[i] <== base[i] * base[i];
        base4[i] <== base2[i] * base2[i];

        lastOutputR[i+1] <== lastOutputL[i] + base4[i] * base[i];
        lastOutputL[i+1] <== lastOutputR[i];
    }
    oL <== lastOutputL[nRounds];
    oR <== lastOutputR[nRounds];
}


template MiMC5Sponge(nInputs){
signal input k;
signal input ins[nInputs];
signal output o;

signal lastR[nInputs + 1];
signal lastC[nInputs + 1];

lastR[0] <== 0;
lastC[0] <== 0;

component layers[nInputs];

for(var i =0; i<nInputs; i++){
    layers[i] = MiMC5Feistel();
    layers[i].iL <== lastR[i] + ins[i];
    layers[i].iR <== lastC[i];
    layers[i].k <== k;

    lastR[i + 1 ] <== layers[i].oL;
    lastC[i + 1 ] <== layers[i].oR;
}

    o<== lastR[nInputs];


}

component main = MiMC5Sponge(2);